require("dotenv")
Dotenv.load
default_platform(:ios)

platform :ios do
  desc "Send Beta to Crashlytics"
  lane :release_beta_build do
    download_certs_and_provisioning_profiles()
    # STAGING
    bump_build()
    build_app(
      export_method: "ad-hoc",
      export_team_id: "#{ENV['TEAM_ID']}",
      clean: true,
      scheme: "#{ENV['SCHEME_NAME_STAGING']}",
      xcargs: "-ONLY_ACTIVE_ARCH=NO",
      include_bitcode: true,
      include_symbols: true,
      derived_data_path: "derivedData",
      configuration: "Staging",
      output_directory: "build",
    )
    upload_to_crashlytics(app_name: "#{ENV['SCHEME_NAME_STAGING']}")
  end

  desc "Deploy to Crashlytics"
  private_lane :upload_to_crashlytics do |options|
    crashlytics(
      ipa_path: "./build/#{ENV['SCHEME_NAME_STAGING']}.ipa",
      groups: nil,
      emails: ["#{ENV['APPLE_ID']}"],
      debug: false,
      notifications: true,
      notes_path: "release_notes.txt",
    )

    slack(message: options[:app_name].concat("was successfully uploaded to Crashlytics")) unless ENV['SLACK_URL'].nil?
  end

  desc "Deploy to AppStore"
  lane :release_app_store_build do
    download_certs_and_provisioning_profiles()
    app_name = "#{ENV['SCHEME_NAME_DEBUG']}"
    sync_code_signing(type: "appstore")
    build_app(
      export_method: "app-store",
      scheme: "#{ENV['SCHEME_NAME']}",
      workspace: "#{ENV['WORKSPACE']}",
      include_bitcode: true,
    )
    upload_to_app_store()
  end

  desc "Create new or download certificate and mobileProvision for all app bundles."
  lane :download_certs_and_provisioning_profiles do
    # Development Cert.
    cert(
      development: true,
      username: "#{ENV['APPLE_ID']}",
      output_path: "./code_signing/certs/development",
    )

    # Development Mobile Provisioning ( DEBUG )
    sigh(
      development: true,
      username: "#{ENV['APPLE_ID']}",
      app_identifier: "#{ENV['BUNDLE_ID_DEBUG']}",
      output_path: "./code_signing/profiles/development",
    )

    # Distrubution Cert.
    cert(
      username: "#{ENV['APPLE_ID']}",
      output_path: "./code_signing/certs/distribution",
    )

    # Ad-Hoc Mobile Provisioning ( STAGING )
    sigh(
      adhoc: true,
      username: "#{ENV['APPLE_ID']}",
      app_identifier: "#{ENV['BUNDLE_ID_STAGING']}",
      output_path: "./code_signing/profiles/adhoc",
    )

    # AppStore Mobile Provisioning ( RELEASE )
    sigh(
      username: "#{ENV['APPLE_ID']}",
      app_identifier: "#{ENV['BUNDLE_ID']}",
      output_path: "./code_signing/profiles/appstore",
    )
  end

  desc "create App ID for all app bundles then Code Signing"
  lane :create_app_id_and_code_signing do
    ## DEBUG
    create_app_on_developer_portal(
      app_identifier: "#{ENV['BUNDLE_ID_DEBUG']}",
      app_name: "#{ENV['SCHEME_NAME_DEBUG']}",
    )
    ## STAGING
    create_app_on_developer_portal(
      app_identifier: "#{ENV['BUNDLE_ID_STAGING']}",
      app_name: "#{ENV['SCHEME_NAME_STAGING']}",
    )
    ## RELEASE
    create_app_on_developer_portal(
      app_identifier: "#{ENV['BUNDLE_ID']}",
      app_name: "#{ENV['SCHEME_NAME']}",
    )
    download_certs_and_provisioning_profiles()
  end

  private_lane :bump_build do
    unless (last_git_commit[:message].include?("Bump build number to"))
      increment_build_number(
        build_number: number_of_commits,
      )
      git_commit(path: "*", message: "Bump build number to #{number_of_commits}")
    end
  end

  desc "create App ID for all app bundles."
  private_lane :create_app_on_developer_portal do |options|
    produce(
      username: "#{ENV['APPLE_ID']}",
      app_identifier: options[:app_identifier],
      app_name: options[:app_name],
      language: options[:language] || "English",
      app_version: options[:app_version] || "1.0",
      sku: options[:sku],
      team_name: options[:team_name],
      skip_itc: true,
    )
  end

  desc "clear build and deriveData"
  lane :clear_all do
    clean_cocoapods_cache
    clean_build_artifacts
    clear_derived_data(derived_data_path: 'derivedData')
    sh "rm -rf #{ENV['PWD']}/derivedData/*"
    sh "rm -rf #{ENV['PWD']}/build/*"
  end
end
